package com.brunomnsilva.fluentfxcss.definitions;

import com.brunomnsilva.fluentfxcss.stylers.concrete.FluentPaneStyler;

import java.util.Map;

/**
 * A {@link StyleDefinition} specifically tailored for styling JavaFX {@link javafx.scene.layout.Pane} nodes.
 * <p>
 * This class extends {@link RegionStyleDefinition}, inheriting all styling capabilities
 * applicable to general {@link javafx.scene.layout.Region}s. It is typically produced by
 * {@code com.brunomnsilva.fluentfxcss.stylers.concrete.FluentPaneStyler}.
 * </p>
 * <p>
 * Since {@code Pane} is a direct subclass of {@code Region} and does not introduce
 * many new CSS-stylable properties of its own beyond those of a {@code Region}, this
 * class primarily serves as a more specific type marker. It signifies that the
 * style definition was intended for or generated with a {@code Pane} in mind.
 * </p>
 * In the current version, this class does not add new methods beyond those in
 * {@code RegionStyleDefinition}. Future extensions could involve Pane-specific
 * convenience methods if relevant CSS properties or styling paradigms emerge.
 *
 * @see RegionStyleDefinition
 * @see NodeStyleDefinition
 * @see StyleDefinition
 * @see FluentPaneStyler
 * @see javafx.scene.layout.Pane
 * @see javafx.scene.layout.Region
 *
 * @author brunomnsilva
 */
public class PaneStyleDefinition extends RegionStyleDefinition {

    /**
     * Constructs a new {@code PaneStyleDefinition} with the given map of styles.
     * The provided map of styles is typically generated by a
     * {@code com.example.fluentfxcss.stylers.concrete.FluentPaneStyler}
     * and contains styles applicable to {@link javafx.scene.layout.Pane} (and by extension,
     * {@link javafx.scene.layout.Region}).
     *
     * @param styles A map where keys are CSS property names and values are their
     *               CSS string representations, relevant for {@code Pane} styling.
     *               This map will be treated as unmodifiable by this instance.
     */
    public PaneStyleDefinition(Map<String, String> styles) {
        super(styles);
    }
}
